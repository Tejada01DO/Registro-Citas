@page "/"

@inject IEmailService EmailService
@inject EmployeeBLL employeeBLL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService Notify

@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Schedule
@using System.Timers

<PageTitle>Index</PageTitle>

<div class="control-container">
    <div class="toast-control">
        <h1>Agenda Una Cita</h1>
        <hr>
        <SfToast @ref="ToastRef" CssClass="e-schedule-reminder e-toast-info" NewestOnTop="true" ShowCloseButton="true" Target=".e-schedule" Timeout="10000">
            <ToastAnimationSettings>
                <ToastShowAnimationSettings Effect="ToastEffect.SlideRightIn"></ToastShowAnimationSettings>
                <ToastHideAnimationSettings Effect="ToastEffect.SlideRightOut"></ToastHideAnimationSettings>
            </ToastAnimationSettings>
            <ToastPosition X="Right" Y="Top"></ToastPosition>
            <ToastTemplates>
                <Template>
                    <div class="e-toast-template e-toast-info">
                        <div class="e-custom-toast">
                            <div class="e-toast-icon e-icons e-schedule-meeting-icon"></div>
                            <div class="e-avatar e-avatar-xsmall e-avatar-circle e-toast-avatar">
                                <img class="image" src="/images/status/@(EventData.EmployeeId).png" alt="avatar" />
                            </div>
                        </div>
                        <div class="e-toast-message">
                            <div class="e-toast-title">@EventData.Subject</div>
                            <div class="e-toast-content">@(EventData.StartTime.ToShortTimeString() + " - " + EventData.EndTime.ToShortTimeString())</div>
                        </div>
                    </div>
                </Template>
            </ToastTemplates>
            <ToastEvents Created="OnToastCreated"></ToastEvents>
        </SfToast>
    </div>
    <div class="schedule-control">
        <SfSchedule @ref="ScheduleRef" TValue="EventModel" Height="500px">
            <ScheduleGroup EnableCompactView="false" Resources="@GroupData"></ScheduleGroup>
            <ScheduleResources>
                <ScheduleResource TItem="Employee" TValue="int[]" DataSource="@employees" Field="EmployeeId" Title="Employee Name" Name="Employees" TextField="EmployeeName" IdField="EmployeeId" ColorField="EmployeeColor" AllowMultiple="true"></ScheduleResource>
            </ScheduleResources>
            <ScheduleEventSettings DataSource="@eventos"></ScheduleEventSettings>
            <ScheduleEvents TValue="EventModel" ActionCompleted="OnActionCompleted"></ScheduleEvents>
        </SfSchedule>
    </div>
    <br>
    <br>
</div>



<style>
    .e-toast .e-schedule-reminder .e-toast-template {
        display: flex;
    }

    .e-toast .e-schedule-reminder .e-custom-toast {
        display: inline-grid;
    }

    .e-toast .e-schedule-reminder .e-schedule-meeting-icon::before {
        content: "\e763";
        font-size: 20px;
    }

    .e-toast .e-schedule-reminder .e-toast-avatar {
        margin-top: 14px;
    }
</style>

@code{
    SfToast ToastRef;
    SfSchedule<EventModel> ScheduleRef;
    private string UserEmail;
    public Employee employee { get; set; } = new Employee(); 
    public string? email { get; set; }
    public List<Employee> employees { get; set; } = new List<Employee>(); 
    public List<EventModel> eventos { get; set; } = new List<EventModel>(); 
    
    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        email = user.Identity.Name;
        CortarHastaArroba(user.Identity.Name);
        UserEmail = CortarHastaArroba(user.Identity.Name);
        // Verifica si el usuario está autenticado y tiene el claim del correo electrónico
        if (user.Identity.IsAuthenticated)
        {
            var userEmailClaim = user.FindFirst(c => c.Type == "email");

            if (userEmailClaim != null)
            {
                UserEmail = CortarHastaArroba(user.Identity.Name);
            }
            else
            {
                // El claim de correo electrónico no está presente
                UserEmail = CortarHastaArroba(user.Identity.Name);
            }

            
            var employee = employeeBLL.Buscar(user.Identity.Name);
            CargarEventos();
            if(employee != null)
            {
                Notify.ShowNotification(
                titulo: "Bienvenido",
                mensaje: $"{UserEmail}",
                NotificationSeverity.Info);
                eventos = employee.Events;
                CargarEventos();
            }
            else
            {
                employeeBLL.Guardar(new Employee
                {
                    EmployeeEmail = user.Identity.Name,
                    EmployeeName = user.Identity.Name,
                    Events = new List<EventModel>()
                });

                Notify.ShowNotification(
                titulo: "Te has registrado",
                mensaje: $"Hola {UserEmail}",
                NotificationSeverity.Info);
                
            }
        }

        employees = employeeBLL.GetList(e => e.EmployeeEmail == email);
    }

    public EmailSettings emailSettings = new EmailSettings
    {
        DisplayName = "Syncfusion Scheduler",
        Username = "CorreoProyecto92@outlook.com",
        Password = "Cproyecto-92",
        Port = 587,
        Host = "smtp-mail.outlook.com"
    };

    public class ResourceModel
    {
        public string EmployeeName { get; set; }
        public int EmployeeId { get; set; }
        public string EmployeeColor { get; set; }
        public string EmployeeEmail { get; set; }
    }

    public EventModel EventData { get; set; }
    public string[] GroupData { get; set; } = new string[] { "Employees" };
    public List<ResourceModel> ResourceData { get; set; } = new List<ResourceModel> {
        new ResourceModel { EmployeeId = 1, EmployeeName = "Employee 1", EmployeeColor = "#EA7A57", EmployeeEmail = "xxxxxxxxxxxxxxx@outlook.com"  },
        new ResourceModel { EmployeeId = 2, EmployeeName = "Employee 2", EmployeeColor = "#357cd2", EmployeeEmail = "correop2463@gmail.com"  },
        new ResourceModel { EmployeeId = 3, EmployeeName = "Employee 3", EmployeeColor = "#7fa900", EmployeeEmail = "xxxxxxxxxxxxxxx@yahoo.com" }
    };
    //public List<EventModel> DataSource = eventos;

    private void OnToastCreated()
    {
        Timer timer = new Timer(60000);
        timer.Elapsed += new ElapsedEventHandler(async (object sender, ElapsedEventArgs e) =>
        {
            List<EventModel> eventDatas = ScheduleRef.GetCurrentViewEvents();
            int AlertBeforeMinutes = 5;
            DateTime CurrentTime = DateFormat(DateTime.Now);
            foreach (EventModel eventData in eventDatas)
            {
                DateTime StartTime = DateFormat(eventData.StartTime);
                if (DateTime.Compare(CurrentTime, StartTime.AddMinutes(-AlertBeforeMinutes)) == 0)
                {
                    EventData = eventData;
                    await InvokeAsync(async () => await ToastRef.ShowAsync());
                }
            }
        });
        timer.Enabled = true;
    }

    private DateTime DateFormat(DateTime date)
    {
        return new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, 0);
    }

    private static List<EventModel> GenerateEvents()
    {
        DateTime date1 = DateTime.Now;
        DateTime startDate = new DateTime(date1.Year, date1.Month, date1.Day, date1.Hour, date1.Minute, 0).AddMinutes(6);
        DateTime endDate = new DateTime(startDate.Ticks).AddHours(2);
        List<EventModel> collections = new List<EventModel>() {
            new EventModel { Id = 1, Subject = "Testing", StartTime = startDate, EndTime = endDate, EmployeeId = 1 },
            new EventModel { Id = 2, Subject = "Meeting", StartTime = startDate, EndTime = endDate, EmployeeId = 2 },
            new EventModel { Id = 3, Subject = "Conference", StartTime = startDate, EndTime = endDate, EmployeeId = 3 },
        };
        return collections;
    }

    private async void OnActionCompleted(ActionEventArgs<EventModel> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            List<EventModel> added = args.AddedRecords ?? new List<EventModel>();
            List<EventModel> changed = args.ChangedRecords ?? new List<EventModel>();
            List<EventModel> deleted = args.DeletedRecords ?? new List<EventModel>();
            List<EventModel> datas = added.Concat(changed).Concat(deleted).ToList();
            List<string> toEmail = new List<string>();
            foreach (EventModel data in datas)
            {
                data.Id = 0;
                employee.Events.Add(data);
                string emails = email;
                if (EmailService.IsValidEmail(emails))
                {
                    toEmail.Add(emails);
                }
            }
            employeeBLL.Guardar(employee);
            toEmail = toEmail.Distinct().ToList();
            string Title = string.Empty;
            switch (args.ActionType)
            {
                case ActionType.EventCreate:
                    Title = "New Event Scheduled";
                    break;
                case ActionType.EventChange:
                    Title = "Scheduled Event Updated";
                    break;
                case ActionType.EventRemove:
                    Title = "Scheduled Event Removed";
                    break;
            }
            await EmailService.SendEmailAsync(toEmail, Title, datas[0]);
        }
    }

    public static string CortarHastaArroba(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input; // Devuelve la cadena original si es nula o vacía
        }

        int indiceArroba = input.IndexOf('@'); // Busca la posición del primer '@'

        if (indiceArroba != -1)
        {
            // Si se encuentra '@', devuelve la parte de la cadena antes del '@'
            return input.Substring(0, indiceArroba);
        }

        // Si no se encuentra '@', devuelve la cadena original
        return input;
    }

    public void CargarEventos()
    {
        eventos = employee.Events;
    }
}